function [ d_states,F_R,k,alpha,Mz,VTRi_steered,RiTV_steered,VTE,dl,ddl,drag,roll_resist, Fx ] ...
    = tires_and_body( car,states,delta_steering,torques, Fz_disturbance)
% Inputs:
% car - structure with car parameters
% states - [16x1] vector of 16 states: [v;omega;euler;position_earth;dro]
% delta_steering - [4x1] vector of steering angles
% torques - [4x1] vector of input torques on individual wheels
% Fz_disturbance - [4x1] vector of percentages of normal forces (Fz_i) acting on
% wheels. Values are in interval <0,1> (meaning <0%,100%> of Fz).
% Fz_disturbance - input for disturbances of normal force acting on wheels.
% Has 4 values (one for each wheel) that are greater than 0. 1 means 100%
% of nominal normal force (acts as no disturbance case).

v = states(1:3);
omega = states(4:6);
euler = states(7:9);
position_earth  = states(10:12);
dro = states(13:16);

%--------------------------------------------------------------------------------
% euler angles 
%--------------------------------------------------------------------------------
phi = euler(1);
th = euler(2);
euler_mat = [1, sin(phi)*tan(th),cos(phi)*tan(th);...
            0, cos(phi),-sin(phi);...
            0, sin(phi)/cos(th), cos(phi)/cos(th) ];
euler_rates = euler_mat*omega;


%--------------------------------------------------------------------------------
% tires 
%--------------------------------------------------------------------------------

[ F_R,k,alpha,Fx,Mz,VTRi_steered,RiTV_steered,VTE,dl,ddl,My ] = ...
    tires_fun(car,v,omega,euler,euler_rates,delta_steering,dro,position_earth, Fz_disturbance);

%--------------------------------------------------------------------------------
% rigid body
%--------------------------------------------------------------------------------
[ v_dot,omega_dot ] = ...
    rigid_body_fun( car,v,omega,euler,F_R );


%--------------------------------------------------------------------------------
% velocity
%--------------------------------------------------------------------------------
dot_pos_earth = VTE'*v;

%--------------------------------------------------------------------------------
% wheel acceleration,  drag and roll resistance, braking
%--------------------------------------------------------------------------------
v=v(:);

% drag
drag = 1/2*car.rho/car.g*car.Cd*car.A  * (v'*v);

f_r = car.fr;
Fz = F_R(3,:);
Fz = Fz(:);

% roll resist
dro_sign = dro;
dro_sign(dro_sign>1) = 1; % smoother sign function (no bullshit around 0)
dro_sign(dro_sign<-1) = -1;
% roll_resist = car.r*(dro_sign .* (f_r*Fz));
roll_resist = dro_sign.*My;

ddro = (torques - car.r*Fx - car.use_resistances*(drag/4 + roll_resist))./car.Jwheel;


%--------------------------------------------------------------------------------
% OUTPUT
%--------------------------------------------------------------------------------
% v_dot(2) = 0;
d_states = [v_dot;omega_dot;euler_rates;dot_pos_earth;ddro];


end

